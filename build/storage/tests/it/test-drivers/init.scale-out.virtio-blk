#!/usr/bin/env bash
#
# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

set -e
[ "$DEBUG" == 'true' ] && set -x

current_script_dir=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
declare vm_serial
declare nqn
declare storage_target_ip
declare ipu_storage_container_ip
declare virtio_blk_virtual_id
declare port_to_expose
# shellcheck disable=SC1091,SC1090
source "${current_script_dir}"/test-helpers

wait_until_port_on_ip_addr_open "${storage_target_ip}" "${DEFAULT_SPDK_PORT}"
create_and_expose_sybsystem_over_tcp \
	"${storage_target_ip}" "${nqn}" "${port_to_expose}"

ramdrive_size_in_mb=4

echo "Create $NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT disks on storage-target"
ramdrives=()
for ((i=0; i < "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"; i++))
do
    ramdrives+=("$(create_ramdrive_and_attach_as_ns_to_subsystem \
        "${storage_target_ip}" "Malloc${i}" "${ramdrive_size_in_mb}" \
        "${nqn}")")
done

wait_until_vm_is_up "${vm_serial}"
log_in_with_default_credentials "${vm_serial}"
is_virtio_blk_not_attached "${vm_serial}"

echo "Create $NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT virtio-blk disks backed by ramdrives"
virtio_blk_devices=()
for ((i=0; i < "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"; i++))
do
    virtio_blk_devices+=("$(create_virtio_blk_without_disk_check "${ipu_storage_container_ip}" \
        "${ramdrives[$i]}" "${i}" "${virtio_blk_virtual_id}" \
        "${nqn}" "${storage_target_ip}" "${port_to_expose}")")
done

wait_for_virtio_blk_sec=5
wait_for_virtio_blk_in_os "${virtio_blk_devices[-1]}" "$wait_for_virtio_blk_sec"

verify_expected_number_of_virtio_blk_devices "${vm_serial}" \
    "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"

echo "Delete all created virtio-blk disks"
for dev in "${virtio_blk_devices[@]}"
do
    delete_virtio_blk "${ipu_storage_container_ip}" "${dev}"
done
verify_expected_number_of_virtio_blk_devices "${vm_serial}" 0
