#!/usr/bin/env bash
#
# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

[ "$DEBUG" == 'true' ] && set -x && export SMA_LOGLEVEL=DEBUG

spdk_pid_file="/spdk_pid"
rm -f "$spdk_pid_file"

IFS=' ' read -ra sock_path_line_content <<< "$(grep 'sock_path:' < /sma_config.yml)"
sock_path=${sock_path_line_content[1]}

if [ -n "$sock_path" ]; then
    export SPDK_ARGS=" -S $sock_path "
fi

# SPDK consumes many file descriptors if we create vhost user devices
# Increase the number of file descriptors per process in order to cover
# scale out scenario.
MAX_BUMBER_OF_FILE_DESCRIPTORS_PER_PROCESS=4096
ulimit -n "$MAX_BUMBER_OF_FILE_DESCRIPTORS_PER_PROCESS"

export EXPOSE_SPDK="false"
/init_spdk "$@" &

function wait_for_spdk_pid_file() {
    spdk_pid_file="$1"
    max_wait_for_pid_counter="$2"
    wait_for_pid_counter=0
    while [ ! -f "$spdk_pid_file" ] ; do
        if [ "$wait_for_pid_counter" -ge "$max_wait_for_pid_counter" ] ; then
            return 1
        fi
        wait_for_pid_counter=$(( wait_for_pid_counter + 1 ))
        sleep 1
    done
    return 0
}

function is_pid_running() {
    pid="$1"
    kill -0 "$pid" &> /dev/null
    return $?
}

wait_max_sec=5
if ! wait_for_spdk_pid_file "$spdk_pid_file" "$wait_max_sec" ; then
    echo "Failed to start spdk-app or socat to expose port." >&2
    exit 1
fi

pid=$(cat "$spdk_pid_file")
if ! is_pid_running "$pid" ; then
    echo "Spdk is not running." >&2
    exit 1
fi

sma.py -c sma_config.yml
